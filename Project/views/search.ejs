<!DOCTYPE html>
<html lang="en">
<head>
    <!-- 이거 보이면 제대로 뒤로 온거임 -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Card Stack</title>
    <link rel="stylesheet" href="search.css">
    <style>
        *, *:before, *:after {
            border: 0;
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        :root {
            font-size: 18px;
            --cardW: 14em;
            --cardH: 8em;
            --cardZInc: 2em;
        }
        body {
            font: 1em "Open Sans", sans-serif;
            height: 100vh;
            overflow-x: hidden;
            background-color: #000;
        }
        main {
            display: block;
            margin: auto;
            position: relative;
            /* height: calc(var(--cardH) * 36 - 1.5em); */
        }
        .cards, .stack {
            transform-style: preserve-3d;
        }
        .cards {
            --scroll: 0;
            display: grid;
            grid-template-rows: repeat(auto-fill, var(--cardH));
            grid-template-columns: var(--cardW);
            grid-gap: 1.5em;
            position: fixed;
            top: 30%;
            left: 65%;
            transform: translateX(-50%) rotateX(45deg) rotateZ(45deg) translateY(var(--scroll));
            transform-origin: 50% 0;
        }
        .stack {
            display: block;
            position: relative;
        }
        .contents {
            color: #000;
            font-size: 0.5em;
            line-height: 1.25;
            -webkit-font-smoothing: antialiased;
        }
        .stack:nth-of-type(even) .contents {
            color: #fff;
        }
        .contents h2 {
            color: #aff;
            font-size: 2em;
            font-weight: 400;
            margin-bottom: 0.25em;
        }
        .contents span {
            margin-right: 0.75em;
        }
        .city {
            margin-top: 11.75em;
        }
        .stack:nth-of-type(4n + 2) .card {
            background-position: 0 100%;
        }
        .stack:nth-of-type(4n + 3) .card {
            background-position: 100% 0;
        }
        .stack:nth-of-type(4n + 4) .card {
            background-position: 100% 100%;
        }
        .stack:nth-child(8n + 5) .card,
        .stack:nth-child(8n + 6) .card,
        .stack:nth-child(8n + 7) .card,
        .stack:nth-child(8n + 8) .card {
            filter: hue-rotate(90deg);
            -webkit-filter: hue-rotate(90deg);
        }
        .stack:nth-child(12n + 9) .card,
        .stack:nth-child(12n + 10) .card,
        .stack:nth-child(12n + 11) .card,
        .stack:nth-child(12n + 12) .card {
            filter: hue-rotate(180deg);
            -webkit-filter: hue-rotate(180deg);
        }
        .stack:hover .top, .stack:focus .top {
            transform: translateZ(calc(var(--cardZInc) * 4));
        }
        .stack:hover .mid-top, .stack:focus .mid-top {
            transform: translateZ(calc(var(--cardZInc) * 3));
        }
        .stack:hover .mid-bottom, .stack:focus .mid-bottom {
            transform: translateZ(calc(var(--cardZInc) * 2));
        }
        .stack:hover .bottom, .stack:focus .bottom {
            transform: translateZ(var(--cardZInc));
        }
        .stack:hover .shadow, .stack:focus .shadow {
            filter: blur(5px);
            -webkit-filter: blur(5px);
            opacity: 0.2;
        }
        .card {
            background-image: url("https://assets.codepen.io/416221/business-card-backgrounds.png");
            background-size: 200% 200%;
            box-shadow: -1px -1px 0 rgba(0, 0, 0, 0.2) inset;
            color: #000;
            padding: 0.75em;
            position: absolute;
            transition: all 0.3s;
            width: 100%;
            height: 100%;
        }
        .top {
            transform: translateZ(4px);
            z-index: 4;
        }
        .mid-top {
            transform: translateZ(3px);
            z-index: 3;
        }
        .mid-bottom {
            transform: translateZ(2px);
            z-index: 2;
        }
        .bottom {
            transform: translateZ(1px);
            z-index: 1;
        }
        .shadow {
            background: #000;
            filter: blur(2px);
            -webkit-filter: blur(2px);
            opacity: 0.4;
        }
        @media screen and (min-width: 361px) {
            main {
                /* height: calc(var(--cardH) * 18 - 1.5em); */
            }
            .cards {
                grid-template-columns: repeat(2, var(--cardW));
            }
        }
        @media screen and (min-width: 641px) {
            main {
                /* height: calc(var(--cardH) * 12 - 1.5em); */
            }
            .cards {
                grid-template-columns: repeat(3, var(--cardW));
            }
        }
        @media screen and (min-width: 961px) {
            main {
                /* height: calc(var(--cardH) * 9 - 1.5em); */
            }
            .cards {
                grid-template-columns: repeat(4, var(--cardW));
            }
        }
        @media screen and (min-width: 1281px) {
            main {
                /* height: calc(var(--cardH) * 8 - 1.5em); */
            }
            .cards {
                grid-template-columns: repeat(5, var(--cardW));
            }
        }
        @media screen and (prefers-color-scheme: dark) {
            body {
                background: #000000;
            }
        }
    </style>
</head>
<body>
    <main>
        <div class="cards" id="cards-container">
            <% cards.forEach(card => { %>
                <div class="stack">
                    <div class="card shadow"></div>
                    <div class="card bottom"></div>
                    <div class="card mid-bottom"></div>
                    <div class="card mid-top"></div>
                    <div class="card top" data-id="<%= card.card_id %>">
                        <div class="contents">
                            <h2><%= card.card_name %></h2>
                            <span><%= card.content %></span>
                            <% if (card.card_image) { %>
                                <img src="<%= card.card_image %>" alt="<%= card.card_name %>">
                            <% } %>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>
    </main>
    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
        function updateCardSize() {
          const cardCount = document.querySelectorAll('.stack').length;
          const root = document.documentElement;
          if (cardCount > 70) {
              root.style.setProperty('--cardW', '9em');
              root.style.setProperty('--cardH', '5em');
          } else if (cardCount > 30) {
              root.style.setProperty('--cardW', '10em');
              root.style.setProperty('--cardH', '6em');
          } else {
              root.style.setProperty('--cardW', '14em');
              root.style.setProperty('--cardH', '8em');
          }

          const mainElement = document.querySelector('main');
          const cardsElement = document.querySelector('.cards');
          let cardsPerRow;
          
          // Adjust cardsPerRow based on the screen width
          if (window.innerWidth >= 1281) {
              cardsPerRow = 5;
          } else if (window.innerWidth >= 961) {
              cardsPerRow = 4;
          } else if (window.innerWidth >= 641) {
              cardsPerRow = 3;
          } else if (window.innerWidth >= 361) {
              cardsPerRow = 2;
          } else {
              cardsPerRow = 1;
          }
          
          const rows = Math.ceil(cardCount / cardsPerRow);
          mainElement.style.height = `calc(var(--cardH) * ${rows} + ${rows - 1} * 1.5em)`;
          cardsElement.style.height = `calc(var(--cardH) * ${rows} + ${rows - 1} * 1.5em)`;
        }

        function scrollGrid() {
          const mainElement = document.querySelector("main");
          const cardsElement = document.querySelector(".cards");
          if (mainElement && cardsElement) {
              let bodyHeight = document.body.offsetHeight,
                  mainHeight = mainElement.offsetHeight,
                  transY = (window.pageYOffset / (mainHeight - bodyHeight)) * -100;
              cardsElement.style.setProperty("--scroll", transY + "%");
          }
        }

          window.addEventListener("resize", () => {
              updateCardSize();
              scrollGrid();
          });
          window.addEventListener("scroll", scrollGrid);
          updateCardSize();
          scrollGrid();

          // Add click event listener to each card
          document.querySelectorAll('.card.top').forEach(card => {
              card.addEventListener('click', () => {
                  const cardId = card.getAttribute('data-id');
                  window.location.href = `/detail/${cardId}`;
              });
          });
      });

    </script>
</body>
</html>
