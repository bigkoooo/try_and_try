<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comment Popup</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: black;
            color: white;
        }
        .comment-form {
            margin-bottom: 20px;
            position: relative;
        }
        .comment-form input {
            width: 80%;
            padding: 10px;
            margin-right: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
        }
        .char-counter {
            position: absolute;
            left: 78%;
            bottom: 15px;
            color: gray;
            font-size: 12px;
        }
        .comment-form button {
            padding: 10px 20px;
            border: none;
            background-color: rgb(174, 35, 27);
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }
        .comment-form button:hover {
            background-color: rgb(200, 50, 50);
        }
        .comment {
            border-bottom: 1px solid #ccc;
            padding: 10px 0;
        }
        .comment-header {
            display: flex;
            justify-content: space-between;
        }
        .comment-body {
            margin: 10px 0;
        }
        .comment-footer {
            display: flex;
            align-items: center;
        }
        .likes {
            margin-right: 10px;
        }
        .comment-action {
            cursor: pointer;
            color: rgb(174, 35, 27);
        }
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        .pagination button {
            padding: 10px 20px;
            margin: 0 5px;
            border: none;
            background-color: rgb(174, 35, 27);
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }
        .pagination button:hover {
            background-color: rgb(200, 50, 50);
        }
        .pagination button:disabled {
            background-color: grey;
            cursor: default;
        }
    </style>
</head>
<body>
    <h2>ÎåìÍ∏Ä ÎÇ¥Ïö©</h2>
    <div class="comment-form">
        <input type="text" id="comment-input" placeholder="ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî">
        <span class="char-counter" id="char-counter">0</span>
        <button id="add-comment">Ï∂îÍ∞Ä</button>
    </div>
    <div id="comments-container">
        <!-- ÎåìÍ∏Ä Î™©Î°ùÏù¥ Ïó¨Í∏∞Ïóê Ï∂îÍ∞ÄÎê©ÎãàÎã§ -->
    </div>
    <div class="pagination" id="pagination">
        <!-- ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Î≤ÑÌäºÎì§Ïù¥ Ïó¨Í∏∞Ïóê Ï∂îÍ∞ÄÎê©ÎãàÎã§ -->
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const commentInput = document.getElementById('comment-input');
            const addCommentButton = document.getElementById('add-comment');
            const commentsContainer = document.getElementById('comments-container');
            const charCounter = document.getElementById('char-counter');
            const paginationContainer = document.getElementById('pagination');
            const commentsPerPage = 10;
            let currentPage = 1;
            let comments = <%- JSON.stringify(comments) %>;
            const user = <%- JSON.stringify(user) %>;
            let totalPages = Math.ceil(comments.length / commentsPerPage);

            // Í∏ÄÏûê Ïàò ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
            const updateCharCount = () => {
                charCounter.textContent = commentInput.value.length;
            };

            // ÏûÖÎ†•Ïù¥ Î≥ÄÍ≤ΩÎê† Îïå Í∏ÄÏûê Ïàò ÏóÖÎç∞Ïù¥Ìä∏
            commentInput.addEventListener('input', updateCharCount);

            // ÎåìÍ∏Ä ÏÉùÏÑ±
            const createComment = (comment) => {
                const commentDiv = document.createElement('div');
                commentDiv.className = 'comment';
                commentDiv.dataset.id = comment.comment_id;

                const commentHeader = document.createElement('div');
                commentHeader.className = 'comment-header';

                const commentAuthor = document.createElement('div');
                commentAuthor.className = 'comment-author';
                commentAuthor.textContent = comment.User ? comment.User.nickname : 'ÏùµÎ™Ö';

                const commentOptions = document.createElement('div');
                commentOptions.className = 'comment-options';

                if (user && user.userId == comment.userid) {
                    const editButton = document.createElement('button');
                    editButton.textContent = 'ÏàòÏ†ï';
                    editButton.addEventListener('click', () => {
                        editComment(commentDiv);
                    });

                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'ÏÇ≠Ï†ú';
                    deleteButton.addEventListener('click', () => {
                        deleteComment(commentDiv);
                    });

                    commentOptions.appendChild(editButton);
                    commentOptions.appendChild(deleteButton);
                }

                commentHeader.appendChild(commentAuthor);
                commentHeader.appendChild(commentOptions);

                const commentBody = document.createElement('div');
                commentBody.className = 'comment-body';
                commentBody.textContent = comment.comment_contents;

                const commentFooter = document.createElement('div');
                commentFooter.className = 'comment-footer';

                const likesSpan = document.createElement('span');
                likesSpan.className = 'likes';
                likesSpan.textContent = '0';

                const likeButton = document.createElement('span');
                likeButton.className = 'comment-action';
                likeButton.innerHTML = 'Ï¢ãÏïÑÏöî <span class="thumb">üëç</span>';
                likeButton.addEventListener('click', (event) => {
                    if (event.target.classList.contains('thumb')) {
                        likesSpan.textContent = '0';
                    } else {
                        let likes = parseInt(likesSpan.textContent);
                        likes++;
                        likesSpan.textContent = likes;
                    }
                });

                commentFooter.appendChild(likesSpan);
                commentFooter.appendChild(likeButton);

                commentDiv.appendChild(commentHeader);
                commentDiv.appendChild(commentBody);
                commentDiv.appendChild(commentFooter);

                commentsContainer.appendChild(commentDiv);
            };

            // ÎåìÍ∏Ä ÏàòÏ†ï
            const editComment = (comment) => {
                const commentBody = comment.querySelector('.comment-body');
                const newText = prompt('ÎåìÍ∏ÄÏùÑ ÏàòÏ†ïÌïòÏÑ∏Ïöî:', commentBody.textContent);
                if (newText) {
                    fetch(`/comment/edit/${comment.dataset.id}`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ comment_contents: newText })
                    }).then(response => {
                        if (response.ok) {
                            commentBody.textContent = newText;
                        } else {
                            alert('Failed to edit comment.');
                        }
                    });
                }
            };

            // ÎåìÍ∏Ä ÏÇ≠Ï†ú
            const deleteComment = (comment) => {
                if (confirm('Are you sure you want to delete this comment?')) {
                    fetch(`/comment/delete/${comment.dataset.id}`, {
                        method: 'DELETE'
                    }).then(response => {
                        if (response.ok) {
                            comments = comments.filter(c => c.comment_id !== comment.dataset.id);
                            totalPages = Math.ceil(comments.length / commentsPerPage);
                            if (currentPage > totalPages) {
                                currentPage = totalPages;
                            }
                            // ÌéòÏù¥ÏßÄ ÏÉàÎ°ú Í≥†Ïπ®
                            location.reload();
                        } else {
                            alert('Failed to delete comment.');
                        }
                    });
                }
            };

            // ÎåìÍ∏Ä Ï∂îÍ∞Ä Ìï®Ïàò
            const addComment = () => {
                const text = commentInput.value.trim();
                if (!user) {
                    alert('Î®ºÏ†Ä Î°úÍ∑∏Ïù∏ÏùÑ Ìï¥Ï£ºÏÑ∏Ïöî');
                    commentInput.value = '';
                    return;
                }
                if (text) {
                    fetch('/comment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ comment_contents: text })
                    }).then(response => {
                        if (response.ok) {
                            response.json().then(newComment => {
                                comments.push(newComment);
                                totalPages = Math.ceil(comments.length / commentsPerPage);
                                displayComments(currentPage);
                                setupPagination(totalPages);
                            });
                            commentInput.value = '';
                            updateCharCount(); // ÎåìÍ∏ÄÏù¥ Ï∂îÍ∞ÄÎêòÎ©¥ Í∏ÄÏûê Ïàò ÏóÖÎç∞Ïù¥Ìä∏
                        } else {
                            alert('Failed to post comment.');
                        }
                    }).catch(error => {
                        console.error('Error posting comment:', error);
                        alert('Failed to post comment.');
                    });
                } else {
                    alert('ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.');
                }
            };

            // ÎåìÍ∏Ä Ï∂îÍ∞Ä Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
            addCommentButton.addEventListener('click', addComment);

            // Enter ÌÇ§Î°ú ÎåìÍ∏Ä Ï∂îÍ∞Ä Ïù¥Î≤§Ìä∏
            commentInput.addEventListener('keyup', (event) => {
                if (event.key === 'Enter') {
                    addComment();
                }
            });

            // ÎåìÍ∏Ä ÌëúÏãú Ìï®Ïàò
            const displayComments = (page) => {
                commentsContainer.innerHTML = '';
                const start = (page - 1) * commentsPerPage;
                const end = start + commentsPerPage;
                const paginatedComments = comments.slice(start, end);
                paginatedComments.forEach(comment => {
                    createComment(comment);
                });
            };

            // ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Î≤ÑÌäº ÏÑ§Ï†ï Ìï®Ïàò
            const setupPagination = (totalPages) => {
                paginationContainer.innerHTML = '';
                for (let i = 1; i <= totalPages; i++) {
                    const button = document.createElement('button');
                    button.textContent = i;
                    button.addEventListener('click', () => {
                        currentPage = i;
                        displayComments(currentPage);
                        setupPagination(totalPages);
                    });
                    if (i === currentPage) {
                        button.disabled = true;
                    }
                    paginationContainer.appendChild(button);
                }
            };

            // Ï¥àÍ∏∞ ÎåìÍ∏Ä Î°úÎìú
            displayComments(currentPage);
            setupPagination(totalPages);

            // Ï¥àÍ∏∞ Í∏ÄÏûê Ïàò ÏóÖÎç∞Ïù¥Ìä∏
            updateCharCount();
        });
    </script>
</body>
</html>
